# 1. Написать программу, которая будет складывать, вычитать, умножать или делить два числа.
# Числа и знак операции вводятся пользователем. После выполнения вычисления программа не должна завершаться,
# а должна запрашивать новые данные для вычислений. Завершение программы должно выполняться при вводе
# символа '0' в качестве знака операции. Если пользователь вводит неверный знак (не '0', '+', '-', '*', '/'),
# то программа должна сообщать ему об ошибке и снова запрашивать знак операции. Также сообщать пользователю о
# невозможности деления на ноль, если он ввел 0 в качестве делителя.

# def sum(a, b):
#     return a + b
#
# def div(a, b):
#     return a - b
#
# def umn(a, b):
#     return a * b
#
# def de(a, b):
#     if b == 0:
#         print('Division by zero!')
#     else:
#         return a / b
#
# my_dict = {
#     '+': sum,
#     '-': div,
#     '*': umn,
#     '/': de
# }
#
# while True:
#     a = int(input('Введите первое число:'))
#     b = int(input('Введите второе число:'))
#     while True:
#         z = input('Введите знак операции или 0 для выхода:')
#         if z in ('0', '+', '-', '*', '/'):
#             if z in my_dict.keys():
#                 print(my_dict.get(z)(a,b))
#             break
#         else:
#             print('Неверный знак операции, попробуйте еще раз')
#     if z == '0':
#         break

#
# 2. Посчитать четные и нечетные цифры введенного натурального числа.
# Например, если введено число 34560, то у него 3 четные цифры (4, 6 и 0) и 2 нечетные (3 и 5).

# x = input('Введите число:')
# ch = []
# nech = []
# for i in x:
#     if int(i) % 2 == 0:
#         ch.append(int(i))
#     else:
#         nech.append(int(i))
# print('Chetnux chisel : {}, {}, Nechetnux chicsel: {}, {}'.format(len(ch), ch, len(nech), nech))

#
# 3. Сформировать из введенного числа обратное по порядку входящих в него цифр и вывести на экран.
# Например, если введено число 3486, то надо вывести число 6843.
#
# x = list(input('Введите число:'))
# x.reverse()
# print(''.join(x))

# 4. Найти сумму n элементов следующего ряда чисел: 1 -0.5 0.25 -0.125 ...
# Количество элементов (n) вводится с клавиатуры.

#x = input('Введите число элементов:')

#
# 5. Вывести на экран коды и символы таблицы ASCII, начиная с символа под номером
# 32 и заканчивая 127-м включительно. Вывод выполнить в табличной форме: по десять пар "код-символ" в каждой строке.

# for idx,i in enumerate(range(32,128)):
#     if idx % 10 == 0:
#         print('\n')
#     print('[symbol: {}, cod: {}]  '.format(chr(i), i), end='')
#
# 6. В программе генерируется случайное целое число от 0 до 100. Пользователь должен его отгадать не более чем
# за 10 попыток. После каждой неудачной попытки должно сообщаться больше или меньше введенное пользователем число,
# чем то, что загадано. Если за 10 попыток число не отгадано, то вывести загаданное число.

# сделано в домашнем задании номер 1

# 7. Напишите программу, доказывающую или проверяющую, что для множества натуральных чисел выполняется
# равенство: 1+2+...+n = n(n+1)/2, где n - любое натуральное число.
#
# x = int(input('Введите число:'))
# left = 0
# for i in range(1,x+1):
#     left += i
# rigth = x*(x + 1) / 2
# if left == rigth:
#     print('is true')

#
# 8. Посчитать, сколько раз встречается определенная цифра в введенной последовательности чисел.
# Количество вводимых чисел и цифра, которую необходимо посчитать, задаются вводом с клавиатуры.

# сделано в домашнем задании номер 1, задача с паролями

#9. Среди натуральных чисел, которые были введены, найти наибольшее по сумме цифр. Вывести на экран это число и сумму его цифр.

s = input('Введите числа:')
max = 0
for i in s.split(sep=' '):
    sum = 0
    l = list(i)
    for j in l:
        sum += int(j)
    if sum > max:
        max = sum
        ch = i
print('Число: {} Сумма: {}'.format(ch, max))